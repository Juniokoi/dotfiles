# Function to source files if they exist
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}
function use() {
    [ -f "$ZDOTDIR/modules/$1" ] && source "$ZDOTDIR/modules/$1"
}

function update() {
	yay -Syyuu --noconfirm
	rustup update
}

function tmux_init {
    # list all tmux sessions
    sessions=$(tmux list-sessions)
    # check if there are any sessions
    if [ -n "$sessions" ]; then
        # use awk to get the name of the first session
        session_name=$(echo "$sessions" | awk 'NR==1{print $1}')
        # initialize the first session
        tmux attach-session -t "$session_name"
    else
        # create a new session if there are no existing sessions
        tmux
    fi
}

function rust_ver() {
	local ver=$(echo $1)
    rustup default "$ver" && rustup override set "$ver"
}

function plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For completions
		completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
		fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
        [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
    fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}

function mach_java_mode() {
    #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
    export SDKMAN_DIR="$HOME/.sdkman"
    [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
}

lowercase(){
    echo "$1" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"
}

OS=`lowercase \`uname\``
KERNEL=`uname -r`
MACH=`uname -m`

if [ "{$OS}" == "windowsnt" ]; then
    OS=windows
elif [ "{$OS}" == "darwin" ]; then
    OS=mac
else
    OS=`uname`
    if [ "${OS}" = "SunOS" ] ; then
        OS=Solaris
        ARCH="uname -p"
        OSSTR="${OS} ${REV}(${ARCH} "uname -v")"
    elif [ "${OS}" = "AIX" ] ; then
        OSSTR="${OS} "oslevel" ("oslevel -r")"
    elif [ "${OS}" = "Linux" ] ; then
        if [ -f /etc/redhat-release ] ; then
            DistroBasedOn='RedHat'
            DIST="cat /etc/redhat-release |sed s/\ release.*//"
            PSUEDONAME="cat /etc/redhat-release | sed s/.*\(// | sed s/\)//"
            REV="cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//"
        elif [ -f /etc/SuSE-release ] ; then
            DistroBasedOn='SuSe'
            PSUEDONAME="cat /etc/SuSE-release | tr "\n" ' '| sed s/VERSION.*//"
            REV="cat /etc/SuSE-release | tr "\n" ' ' | sed s/.*=\ //"
        elif [ -f /etc/arch-release ] ; then
            DistroBasedOn='Arch'
            DIST="arch"
            PSUEDONAME="cat /etc/arch-release | sed s/.*\(// | sed s/\)//"
            REV="cat /etc/arch-release | sed s/.*release\ // | sed s/\ .*//"
        elif [ -f /etc/mandrake-release ] ; then
            DistroBasedOn='Mandrake'
            PSUEDONAME="cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//"
            REV="cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//"
        elif [ -f /etc/debian_version ] ; then
            DistroBasedOn='Debian'
            DIST="cat /etc/lsb-release | grep '^DISTRIB_ID' | awk -F=  '{ print $2 }'"
            PSUEDONAME="cat /etc/lsb-release | grep '^DISTRIB_CODENAME' | awk -F=  '{ print $2 }'"
            REV="cat /etc/lsb-release | grep '^DISTRIB_RELEASE' | awk -F=  '{ print $2 }'"
        fi
        if [ -f /etc/UnitedLinux-release ] ; then
            DIST="${DIST}["cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//"]"
        fi
        OS="lowercase $OS"
        DistroBasedOn="lowercase $DistroBasedOn"
        readonly OS
        export DIST
        readonly DistroBasedOn
        readonly PSUEDONAME
        readonly REV
        readonly KERNEL
        readonly MACH
    fi
fi
